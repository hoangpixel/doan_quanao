/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;
import BUS.ChiTietHoaDonBUS;
import BUS.HoaDonBUS;
import BUS.SanPhamBUS;
import GUI.ChiTietHoaDonGUI;
import DTO.ChiTietHoaDonDTO;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;
/**
 *
 * @author suvie
 */
public class xuLyExcelChiTietHoaDon extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelChiTietHoaDon
     */
    ArrayList<ChiTietHoaDonDTO> dskq;
    ChiTietHoaDonGUI gui;
    public xuLyExcelChiTietHoaDon(java.awt.Frame parent, boolean modal,ArrayList<ChiTietHoaDonDTO> dskq, ChiTietHoaDonGUI gui) {
        super(parent, modal);
        this.dskq = dskq;
        this.gui=gui;
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setTitle("Xử lý Excel");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel Chi Tiết Hóa Đơn");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachChiTietHoaDon.xlsx"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            File existingFile = new File(filePath);
            if (existingFile.exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "File đã tồn tại, bạn có muốn ghi đè không?",
                        "Xác nhận ghi đè", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.NO_OPTION) return;
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Chi Tiết Hóa Đơn");

                // --- Cell Styles ---
                CellStyle headerStyle = workbook.createCellStyle();
                headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);
                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                CellStyle numberStyle = workbook.createCellStyle();
                numberStyle.setAlignment(HorizontalAlignment.RIGHT);
                numberStyle.setBorderTop(BorderStyle.THIN);
                numberStyle.setBorderBottom(BorderStyle.THIN);
                numberStyle.setBorderLeft(BorderStyle.THIN);
                numberStyle.setBorderRight(BorderStyle.THIN);
                // --- End Cell Styles ---

                Row headerRow = sheet.createRow(0);
                String[] headers = {"Mã Hóa Đơn", "Mã Phiên Bản", "Mã Sản Phẩm", "Số Lượng", "Đơn Giá"};
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                int rowNum = 1;
                if (dskq != null && !dskq.isEmpty()) {
                    for (ChiTietHoaDonDTO cthd : dskq) {
                        Row row = sheet.createRow(rowNum++);
                        row.createCell(0).setCellValue(cthd.getMaHoaDon());
                        row.getCell(0).setCellStyle(numberStyle);
                        row.createCell(1).setCellValue(cthd.getMaPhienBan());
                        row.getCell(1).setCellStyle(numberStyle);
                        row.createCell(2).setCellValue(cthd.getMaSanPham());
                        row.getCell(2).setCellStyle(numberStyle);
                        row.createCell(3).setCellValue(cthd.getSoLuong());
                        row.getCell(3).setCellStyle(numberStyle);
                        row.createCell(4).setCellValue(cthd.getDonGia());
                        row.getCell(4).setCellStyle(numberStyle);
                    }
                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JOptionPane.showMessageDialog(this, "Xuất file Excel thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xuất file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this,
                "Việc nhập dữ liệu Chi Tiết Hóa Đơn từ Excel có thể ảnh hưởng đến số lượng tồn kho và tổng tiền hóa đơn.\n" +
                "Bạn có chắc chắn muốn tiếp tục không?",
                "Cảnh báo Import",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.NO_OPTION) {
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn File Excel CTHD");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ArrayList<ChiTietHoaDonDTO> excelData = readExcelFile(selectedFile); // Gọi hàm đọc đúng

            if (excelData != null && !excelData.isEmpty()) {
                ChiTietHoaDonBUS bus = new ChiTietHoaDonBUS(); // Sửa BUS
                HoaDonBUS hoaDonBUS = new HoaDonBUS(); // Cần để kiểm tra MaHD
                SanPhamBUS sanPhamBUS = new SanPhamBUS(); // Cần để kiểm tra MaSP
                bus.docDSCTHD(); // Đảm bảo cache BUS được load

                int successCount = 0;
                int errorCount = 0;
                int updateCount = 0;
                StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

                for (ChiTietHoaDonDTO cthdFromExcel : excelData) {
                    try {
                        // --- Kiểm tra dữ liệu hợp lệ ---
                        if (cthdFromExcel.getMaHoaDon() <= 0 || cthdFromExcel.getMaSanPham() <= 0 ||
                            cthdFromExcel.getSoLuong() <= 0 || cthdFromExcel.getDonGia() <= 0) {
                            throw new IllegalArgumentException("Mã HĐ, Mã SP, Số lượng, Đơn giá phải là số dương.");
                        }
                        // Kiểm tra sự tồn tại của MaHD và MaSP trong DB
                        if (!hoaDonBUS.ktraMaHD(cthdFromExcel.getMaHoaDon())) {
                             throw new IllegalArgumentException("Mã Hóa Đơn " + cthdFromExcel.getMaHoaDon() + " không tồn tại.");
                        }
                         if (!sanPhamBUS.ktraMaSP(cthdFromExcel.getMaSanPham())) {
                             throw new IllegalArgumentException("Mã Sản Phẩm " + cthdFromExcel.getMaSanPham() + " không tồn tại.");
                         }
                        // --- Kết thúc kiểm tra ---


                        ChiTietHoaDonDTO existingCTHD = bus.layChiTietHoaDonTheoBaMa(cthdFromExcel.getMaHoaDon(), cthdFromExcel.getMaSanPham(), cthdFromExcel.getMaPhienBan());

                        if (existingCTHD != null) {
                            // Đã tồn tại -> Cập nhật
                            // Cần lấy số lượng cũ để hàm sua xử lý đúng tồn kho
                            // int oldSoLuong = existingCTHD.getSoLuong(); // Hàm sua trong BUS đã tự làm việc này
                            if (bus.sua(cthdFromExcel)) { // Hàm sua trong BUS đã bao gồm xử lý tồn kho
                                updateCount++;
                            } else {
                                // Có thể lỗi do không đủ tồn kho khi tăng số lượng
                                throw new Exception("Lỗi cập nhật (có thể do tồn kho không đủ).");
                            }
                        } else {
                            // Chưa tồn tại -> Thêm mới
                            if (bus.them(cthdFromExcel)) { // Hàm them trong BUS đã bao gồm xử lý tồn kho
                                successCount++;
                            } else {
                                // Có thể lỗi do không đủ tồn kho
                                throw new Exception("Lỗi thêm mới (có thể do tồn kho không đủ).");
                            }
                        }
                    } catch (IllegalArgumentException | NullPointerException ex) {
                        errorCount++;
                        errorDetails.append("- Dòng ứng với (MaHD: ").append(cthdFromExcel.getMaHoaDon())
                                    .append(", MaSP: ").append(cthdFromExcel.getMaSanPham()).append("): ")
                                    .append(ex.getMessage()).append("\n");
                    } catch (Exception e) {
                        errorCount++;
                         errorDetails.append("- Lỗi không xác định với (MaHD: ").append(cthdFromExcel.getMaHoaDon())
                                    .append(", MaSP: ").append(cthdFromExcel.getMaSanPham()).append("): ")
                                    .append(e.getMessage()).append("\n");
                        e.printStackTrace();
                    }
                }

                // Cập nhật lại cache trong BUS
                 bus.docDSCTHD(); // Gọi hàm refresh của BUS

                // Làm mới danh sách hiển thị trên GUI
                if (gui != null) {
                    gui.loadDataTable(bus.docDSCTHD()); // Gọi lại hàm load của ChiTietHoaDonGUI
                }

                // Hiển thị thông báo tổng kết
                StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
                 message.append("- Tổng số dòng dữ liệu đọc được: ").append(excelData.size()).append("\n");
                message.append("- Số chi tiết thêm mới thành công: ").append(successCount).append("\n");
                message.append("- Số chi tiết cập nhật thành công: ").append(updateCount).append("\n");
                message.append("- Số dòng bị lỗi hoặc bỏ qua: ").append(errorCount);

                JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>");
                lb.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                 if (errorCount > 0) {
                    JTextArea textArea = new JTextArea(errorDetails.toString());
                    textArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(400, 200));
                    JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
                }

            } else if (excelData != null) {
                 JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDocActionPerformed
    private ArrayList<ChiTietHoaDonDTO> readExcelFile(File file) {
        ArrayList<ChiTietHoaDonDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (rowIterator.hasNext()) {
                rowIterator.next(); // Bỏ qua hàng tiêu đề
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                ChiTietHoaDonDTO cthd = new ChiTietHoaDonDTO(); // Sửa: Tạo ChiTietHoaDonDTO
                boolean rowHasData = false; // Cần cả MaHD và MaSP hợp lệ

                try {
                    // Đọc Mã Hóa Đơn (Cột 0) - Số, bắt buộc
                    Cell cellMaHD = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellMaHD != null && cellMaHD.getCellType() == CellType.NUMERIC) {
                        cthd.setMaHoaDon((int) cellMaHD.getNumericCellValue()); // Sửa: setMaHoaDon
                    } else {
                        System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Mã Hóa Đơn không hợp lệ hoặc bị trống.");
                        continue;
                    }

                    // Đọc Mã Sản Phẩm (Cột 1) - Số, bắt buộc
                    Cell cellMaSP = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                     if (cellMaSP != null && cellMaSP.getCellType() == CellType.NUMERIC) {
                        cthd.setMaSanPham((int) cellMaSP.getNumericCellValue()); // Sửa: setMaSanPham
                        rowHasData = true; // Chỉ khi cả MaHD và MaSP hợp lệ
                    } else {
                        System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Mã Sản Phẩm không hợp lệ hoặc bị trống.");
                        continue;
                    }

                    // Đọc Số Lượng (Cột 2) - Số, bắt buộc
                    Cell cellSoLuong = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellSoLuong != null && cellSoLuong.getCellType() == CellType.NUMERIC) {
                        cthd.setSoLuong((int) cellSoLuong.getNumericCellValue()); // Sửa: setSoLuong
                    } else {
                        System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Số Lượng không hợp lệ hoặc bị trống.");
                        continue;
                    }

                     // Đọc Đơn Giá (Cột 3) - Số, bắt buộc
                    Cell cellDonGia = row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellDonGia != null && cellDonGia.getCellType() == CellType.NUMERIC) {
                        cthd.setDonGia((int) cellDonGia.getNumericCellValue()); // Sửa: setDonGia
                    } else {
                        System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Đơn Giá không hợp lệ hoặc bị trống.");
                        continue;
                    }


                    if (rowHasData) {
                        dataList.add(cthd);
                    }

                } catch (Exception e) {
                     System.err.println("Lỗi khi đọc dòng " + (row.getRowNum() + 1) + ": " + e.getMessage());
                    continue;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return dataList;
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
