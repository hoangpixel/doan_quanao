/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;
import BUS.LoaiSanPhamBUS;
import GUI.LoaiSanPhamGUI;
import DTO.LoaiSanPhamDTO;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;
/**
 *
 * @author suvie
 */
public class xuLyExcelLoaiSanPham extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelLoaiSanPham
     */
    ArrayList<LoaiSanPhamDTO> dskq;
    LoaiSanPhamGUI gui;
    public xuLyExcelLoaiSanPham(java.awt.Frame parent, boolean modal,ArrayList<LoaiSanPhamDTO> dskq, LoaiSanPhamGUI gui) {
        super(parent, modal);
        this.dskq = dskq;
        this.gui=gui;
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setTitle("Xử lý Excel");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachLoaiSanPham.xlsx")); // Đổi tên file mặc định

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            File existingFile = new File(filePath);
            if (existingFile.exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "File đã tồn tại, bạn có muốn ghi đè không?",
                        "Xác nhận ghi đè",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.NO_OPTION) {
                    return;
                }
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Danh sách loại sản phẩm"); // Đổi tên sheet

                // --- Định dạng CellStyle ---
                CellStyle headerStyle = workbook.createCellStyle();
                headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);

                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                CellStyle dataStyle = workbook.createCellStyle();
                dataStyle.setAlignment(HorizontalAlignment.LEFT);
                dataStyle.setBorderTop(BorderStyle.THIN);
                dataStyle.setBorderBottom(BorderStyle.THIN);
                dataStyle.setBorderLeft(BorderStyle.THIN);
                dataStyle.setBorderRight(BorderStyle.THIN);

                CellStyle numberStyle = workbook.createCellStyle();
                numberStyle.setAlignment(HorizontalAlignment.RIGHT);
                numberStyle.setBorderTop(BorderStyle.THIN);
                numberStyle.setBorderBottom(BorderStyle.THIN);
                numberStyle.setBorderLeft(BorderStyle.THIN);
                numberStyle.setBorderRight(BorderStyle.THIN);
                // --- Kết thúc định dạng ---

                Row headerRow = sheet.createRow(0);
                // Sửa Headers
                String[] headers = {"Mã loại", "Tên loại"};
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                int rowNum = 1;
                // Sửa: Lấy dữ liệu từ LoaiSanPhamBUS
                LoaiSanPhamBUS tempBus = new LoaiSanPhamBUS();
                ArrayList<LoaiSanPhamDTO> currentList = tempBus.docDSLSP();

                if (currentList != null && !currentList.isEmpty()) {
                    // Sửa: Lặp qua LoaiSanPhamDTO
                    for (LoaiSanPhamDTO lsp : currentList) {
                        Row row = sheet.createRow(rowNum++);
                        row.createCell(0).setCellValue(lsp.getMaLoai()); // Sửa: getMaLoai
                        row.getCell(0).setCellStyle(numberStyle);

                        row.createCell(1).setCellValue(lsp.getTenLoai()); // Sửa: getTenLoai
                        row.getCell(1).setCellStyle(dataStyle);
                    }
                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JLabel lb = new JLabel("Xuất file Excel thành công!");
                    lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                    JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JLabel lb = new JLabel("Lỗi khi xuất file Excel: " + e.getMessage());
                lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                JOptionPane.showMessageDialog(this, lb, "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    
    
    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn File Excel Loại Sản Phẩm"); // Sửa tiêu đề
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ArrayList<LoaiSanPhamDTO> excelData = readExcelFile(selectedFile); // Gọi hàm đọc đúng

            if (excelData != null && !excelData.isEmpty()) {
                LoaiSanPhamBUS bus = new LoaiSanPhamBUS(); // Sửa BUS
                bus.docDSLSP(); // Đảm bảo cache BUS được load

                int successCount = 0;
                int errorCount = 0;
                int updateCount = 0;
                StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

                for (LoaiSanPhamDTO lspFromExcel : excelData) {
                    try {
                        // Kiểm tra dữ liệu hợp lệ
                        if (lspFromExcel.getTenLoai() == null || lspFromExcel.getTenLoai().trim().isEmpty()) {
                            throw new IllegalArgumentException("Tên loại không được để trống (Mã loại Excel: " + lspFromExcel.getMaLoai() + ")");
                        }

                        // Mã loại từ Excel có thể không quan trọng nếu DB tự tăng
                        // hoặc dùng để cập nhật. Cần xác định rõ logic.
                        // Giả sử: Nếu Mã loại > 0 và tồn tại -> Cập nhật. Nếu không -> Thêm mới.

                        LoaiSanPhamDTO existingLSP = null;
                        if (lspFromExcel.getMaLoai() > 0) {
                           existingLSP = bus.layLSPTheoMa(lspFromExcel.getMaLoai());
                        }

                        if (existingLSP != null) {
                            // Mã loại tồn tại -> Cập nhật (Chỉ cập nhật tên)
                            existingLSP.setTenLoai(lspFromExcel.getTenLoai()); // Chỉ cập nhật tên
                            bus.sua(existingLSP);
                            updateCount++;
                        } else {
                            // Mã loại không tồn tại hoặc không có trong file -> Thêm mới
                            // Tạo DTO mới không cần mã (nếu DB tự tăng)
                            LoaiSanPhamDTO newLSP = new LoaiSanPhamDTO(0, lspFromExcel.getTenLoai());
                            bus.them(newLSP);
                            successCount++;
                        }
                    } catch (IllegalArgumentException | NullPointerException ex) {
                        errorCount++;
                        errorDetails.append("- Dòng ứng với Mã loại Excel ").append(lspFromExcel.getMaLoai()).append(": ").append(ex.getMessage()).append("\n");
                    } catch (Exception e) {
                        errorCount++;
                        errorDetails.append("- Lỗi không xác định với Mã loại Excel ").append(lspFromExcel.getMaLoai()).append(": ").append(e.getMessage()).append("\n");
                        e.printStackTrace();
                    }
                }

                // Cập nhật lại cache trong BUS
                bus.docDSLSP(); // Đọc lại toàn bộ sau khi thêm/sửa

                // Làm mới danh sách hiển thị trên GUI
                if (gui != null) {
                    gui.loadDataTable(bus.docDSLSP()); // Gọi lại hàm load của LoaiSanPhamGUI
                }

                // Hiển thị thông báo tổng kết
                StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
                message.append("- Tổng số dòng dữ liệu đọc được: ").append(excelData.size()).append("\n");
                message.append("- Số loại SP thêm mới thành công: ").append(successCount).append("\n");
                message.append("- Số loại SP cập nhật thành công: ").append(updateCount).append("\n");
                message.append("- Số dòng bị lỗi hoặc bỏ qua: ").append(errorCount);

                JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>");
                lb.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                if (errorCount > 0) {
                    JTextArea textArea = new JTextArea(errorDetails.toString());
                    textArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(400, 200));
                    JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
                }

            } else if (excelData != null) {
                JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDocActionPerformed
    private ArrayList<LoaiSanPhamDTO> readExcelFile(File file) {
        ArrayList<LoaiSanPhamDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (rowIterator.hasNext()) {
                rowIterator.next(); // Bỏ qua hàng tiêu đề
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                LoaiSanPhamDTO lsp = new LoaiSanPhamDTO();
                boolean rowHasData = false;

                try {
                    // Đọc Mã loại (Cột 0) - Số, có thể là null nếu thêm mới
                    Cell cellMaLoai = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellMaLoai != null && cellMaLoai.getCellType() == CellType.NUMERIC) {
                        lsp.setMaLoai((int) cellMaLoai.getNumericCellValue());
                        // Không set rowHasData vì Mã loại có thể không cần thiết khi thêm mới
                    } else {
                        lsp.setMaLoai(0); // Mặc định nếu thêm mới hoặc lỗi
                    }

                    // Đọc Tên loại (Cột 1) - Chuỗi, bắt buộc
                    Cell cellTenLoai = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellTenLoai != null && cellTenLoai.getCellType() == CellType.STRING && !cellTenLoai.getStringCellValue().trim().isEmpty()) {
                        lsp.setTenLoai(cellTenLoai.getStringCellValue().trim());
                        rowHasData = true; // Dòng có dữ liệu hợp lệ nếu có Tên loại
                    } else {
                        System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Tên loại không hợp lệ hoặc bị trống.");
                        continue; // Bỏ qua dòng này nếu Tên loại trống
                    }

                    if (rowHasData) {
                        dataList.add(lsp);
                    }

                } catch (Exception e) {
                    System.err.println("Lỗi khi đọc dòng " + (row.getRowNum() + 1) + ": " + e.getMessage());
                    continue;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return dataList;
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
