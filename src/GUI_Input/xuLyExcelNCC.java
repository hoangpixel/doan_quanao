/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;

/**
 *
 * @author Vinh
 */
import BUS.NhaCungCapBUS;
import DTO.NhaCungCapDTO;
import GUI.NhaCungCapGUI;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;

public class xuLyExcelNCC extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelNCC
     */
    ArrayList<NhaCungCapDTO> ds;
    NhaCungCapGUI gui;
    public xuLyExcelNCC(java.awt.Frame parent, boolean modal, ArrayList<NhaCungCapDTO> ds, NhaCungCapGUI gui) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setSelectedFile(new File("DanhSachNhaCungCap.xlsx"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();
        if (!filePath.toLowerCase().endsWith(".xlsx")) {
            filePath += ".xlsx";
        }

        File existingFile = new File(filePath);
        if (existingFile.exists()) {
            int result = JOptionPane.showConfirmDialog(this,
                    "File đã tồn tại, bạn có muốn ghi đè không?",
                    "Xác nhận ghi đè",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.NO_OPTION) {
                return;
            }
        }

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Danh sách nhà cung cấp");

            // Style header
            CellStyle headerStyle = workbook.createCellStyle();
            headerStyle.setAlignment(HorizontalAlignment.CENTER);
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderTop(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);

            org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 12);
            headerStyle.setFont(headerFont);

            // Style dữ liệu
            CellStyle dataStyle = workbook.createCellStyle();
            dataStyle.setBorderTop(BorderStyle.THIN);
            dataStyle.setBorderBottom(BorderStyle.THIN);
            dataStyle.setBorderLeft(BorderStyle.THIN);
            dataStyle.setBorderRight(BorderStyle.THIN);

            // Header
            String[] headers = {"Mã NCC", "Tên NCC", "SĐT", "Địa chỉ"};
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerStyle);
            }

            // Ghi dữ liệu
            NhaCungCapBUS bus = new NhaCungCapBUS();
            ArrayList<NhaCungCapDTO> list = bus.layTatCaNCC();
            int rowNum = 1;

            for (NhaCungCapDTO ncc : list) {
                Row row = sheet.createRow(rowNum++);
                int col = 0;

                Cell c0 = row.createCell(col++);
                c0.setCellValue(ncc.getMaNCC());
                c0.setCellStyle(dataStyle);

                Cell c1 = row.createCell(col++);
                c1.setCellValue(ncc.getTenNCC());
                c1.setCellStyle(dataStyle);

                Cell c2 = row.createCell(col++);
                c2.setCellValue(ncc.getSdtNCC());
                c2.setCellStyle(dataStyle);

                Cell c3 = row.createCell(col++);
                c3.setCellValue(ncc.getDiaChi());
                c3.setCellStyle(dataStyle);
            }

            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            try (FileOutputStream fos = new FileOutputStream(filePath)) {
                workbook.write(fos);
                JLabel lb = new JLabel("Xuất file Excel thành công!");
                lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException e) {
            JLabel lb = new JLabel("Lỗi khi ghi file Excel: " + e.getMessage());
            lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
            JOptionPane.showMessageDialog(this, lb, "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn file Excel Nhà cung cấp");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);

        int result = fileChooser.showOpenDialog(this);
        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File selectedFile = fileChooser.getSelectedFile();
        ArrayList<NhaCungCapDTO> excelData = readExcelNCC(selectedFile);

        if (excelData == null) {
            return;
        }
        if (excelData.isEmpty()) {
            JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        NhaCungCapBUS bus = new NhaCungCapBUS();
        int successCount = 0, updateCount = 0, errorCount = 0;
        StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

        for (NhaCungCapDTO dto : excelData) {
            try {
                if (dto.getTenNCC() == null || dto.getTenNCC().isEmpty()
                        || dto.getSdtNCC() == null || dto.getSdtNCC().isEmpty()
                        || dto.getDiaChi() == null || dto.getDiaChi().isEmpty()) {
                    throw new IllegalArgumentException("Dữ liệu không hợp lệ (MANCC: " + dto.getMaNCC() + ")");
                }

                NhaCungCapDTO existing = bus.layNCCTheoMa(dto.getMaNCC());
                if (existing != null) {
                    bus.suaNCC(dto);
                    updateCount++;
                } else {
                    bus.themNCC(dto);
                    successCount++;
                }
            } catch (Exception ex) {
                errorCount++;
                errorDetails.append("- Mã NCC ").append(dto.getMaNCC()).append(": ").append(ex.getMessage()).append("\n");
            }
        }

        bus.refreshDanhSac();

        // Thông báo kết quả
        StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
        message.append("- Tổng dòng đọc: ").append(excelData.size()).append("\n");
        message.append("- Thêm mới: ").append(successCount).append("\n");
        message.append("- Cập nhật: ").append(updateCount).append("\n");
        message.append("- Bị lỗi: ").append(errorCount);

        JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>");
        lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

        if (errorCount > 0) {
            JTextArea textArea = new JTextArea(errorDetails.toString());
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(400, 200));
            JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDocActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setLocationRelativeTo(getParent());
    }//GEN-LAST:event_formWindowOpened

    private ArrayList<NhaCungCapDTO> readExcelNCC(File file) {
        ArrayList<NhaCungCapDTO> list = new ArrayList<>();

        try (FileInputStream fis = new FileInputStream(file); Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = sheet.iterator();
            if (iterator.hasNext()) {
                iterator.next(); // Bỏ dòng tiêu đề
            }
            while (iterator.hasNext()) {
                Row row = iterator.next();
                try {
                    NhaCungCapDTO dto = new NhaCungCapDTO();
                    dto.setMaNCC((int) row.getCell(0).getNumericCellValue());
                    dto.setTenNCC(row.getCell(1).getStringCellValue().trim());
                    dto.setSdtNCC(row.getCell(2).getStringCellValue().trim());
                    dto.setDiaChi(row.getCell(3).getStringCellValue().trim());
                    list.add(dto);
                } catch (Exception e) {
                    System.err.println("Lỗi khi đọc dòng " + row.getRowNum() + ": " + e.getMessage());
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return null;
        }

        return list;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
