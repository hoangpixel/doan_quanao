/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;

import BUS.PhieuNhapBUS;
import BUS.SanPhamBUS;
import BUS.PhienBanSanPhamBUS;
import BUS.CTPNBUS;
import BUS.SanPhamBUS;
import DTO.CTPNDTO;
import DTO.PhieuNhapDTO;
import DTO.SanPhamDTO;
import DTO.PhienBanSanPhamDTO;
import DTO.SanPhamDTO;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.util.ArrayList;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javax.swing.table.TableModel;
import java.io.File;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;

/**
 *
 * @author laptop
 */
public class ChiTietPhieuNhap extends javax.swing.JDialog {
    public boolean xacNhan = false;
    public PhieuNhapDTO pn;
    public CTPNDTO ctpn;
    public ArrayList<CTPNDTO> dsCTPN = new ArrayList<>();
    public PhieuNhapBUS pnbus = new PhieuNhapBUS();
    
    /**
     * Creates new form ChiTietPhieuNhap
     */
    public ChiTietPhieuNhap(java.awt.Frame parent, boolean modal, PhieuNhapDTO pn) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    
        // Lưu thông tin phiếu nhập được truyền vào
        this.pn = pn;
    
        // Điền thông tin phiếu nhập vào form
        tMaPN.setText(String.valueOf(pn.getMaPN()));
        tMaNV.setText(String.valueOf(pn.getMaNV()));
        tMaNCC.setText(String.valueOf(pn.getMaNCC()));
        tTongTien.setText(String.valueOf(pn.getTongTien()));
    
        // Thiết lập các trường là không thể sửa
        tMaPN.setEditable(false);
        tMaNV.setEditable(false);
        tMaNCC.setEditable(false);
        tTongTien.setEditable(false);
    
        // Load chi tiết phiếu nhập
        loadCTPNData(pn.getMaPN());
    }

    // Thêm phương thức để load danh sách CTPN
    private void loadCTPNData(int mapn) {
        try {
            CTPNBUS ctpnBUS = new CTPNBUS();
            ctpnBUS.docDSPN(); // Đọc toàn bộ CTPN từ database
        
            // Lọc ra các CTPN thuộc phiếu nhập hiện tại
            for (CTPNDTO item : ctpnBUS.ds) {
                if (item.getMaPN() == mapn) {
                    dsCTPN.add(item);
                }
            }
        
            // Load dữ liệu lên bảng
            loadTableData();
        
            System.out.println("Đã load " + dsCTPN.size() + " chi tiết phiếu nhập của PN #" + mapn);
        } catch (Exception e) {
            System.out.println("Lỗi khi load chi tiết phiếu nhập: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private String getTenByMaSP(int maSP){
        String tenSP = null;
        SanPhamBUS spbus = new SanPhamBUS();
        tenSP = spbus.getTenSanPhamByMaSP(maSP);
        return tenSP;    
    }

    private String getPhienBanInfo(int maPB){
        String tenPB = null;
        PhienBanSanPhamBUS pbspbus = new PhienBanSanPhamBUS();
        tenPB = pbspbus.getPhienBanByMaPB(maPB);
        return tenPB;    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tMaNV = new javax.swing.JTextField();
        tMaNCC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tMaPN = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSP = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        tTongTien = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnXuatPDF = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CHI TIẾT PHIẾU NHẬP");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("Mã NCC:");

        jLabel3.setText("Mã NV:");

        jLabel4.setText("Mã PN:");

        tMaPN.setEditable(false);

        tbSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tên SP", "Phiên bản", "Số lượng", "Đơn giá", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSP.setColumnSelectionAllowed(true);
        tbSP.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbSP);
        tbSP.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel9.setText("Tổng:");

        tTongTien.setEditable(false);

        jLabel11.setText("Đ");

        btnXuatPDF.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXuatPDF.setText("Xuất file PDF");
        btnXuatPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tMaPN, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnXuatPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tMaPN, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXuatPDF, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnXuatPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatPDFActionPerformed
        try {
            // Hiển thị hộp thoại chọn nơi lưu file
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Lưu file PDF");
            fileChooser.setSelectedFile(new File("PhieuNhap_" + pn.getMaPN() + ".pdf"));
            
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF Files", "pdf");
            fileChooser.setFileFilter(filter);
            
            int userSelection = fileChooser.showSaveDialog(this);
            
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                // Đảm bảo đuôi file là .pdf
                if (!fileToSave.getName().toLowerCase().endsWith(".pdf")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".pdf");
                }
                
                // Tạo document PDF
                PDDocument document = new PDDocument();
                PDPage page = new PDPage();
                document.addPage(page);
                
                // Load font hỗ trợ tiếng Việt có dấu
                PDType0Font font = PDType0Font.load(document, new File("c:/windows/fonts/arial.ttf"));
                PDType0Font fontBold = PDType0Font.load(document, new File("c:/windows/fonts/arialbd.ttf"));
                
                float margin = 50;
                float yStart = page.getMediaBox().getHeight() - margin;
                float tableWidth = page.getMediaBox().getWidth() - 2 * margin;
                float yPosition = yStart;
                
                PDPageContentStream contentStream = new PDPageContentStream(document, page);
                
                // Tiêu đề
                contentStream.beginText();
                contentStream.setFont(fontBold, 18);
                float titleWidth = fontBold.getStringWidth("CHI TIẾT PHIẾU NHẬP") / 1000 * 18;
                float centerX = (page.getMediaBox().getWidth() - titleWidth) / 2;
                contentStream.newLineAtOffset(centerX, yPosition);
                contentStream.showText("CHI TIẾT PHIẾU NHẬP");
                contentStream.endText();
                yPosition -= 40;
                
                // Thông tin phiếu nhập
                contentStream.beginText();
                contentStream.setFont(font, 12);
                contentStream.newLineAtOffset(margin, yPosition);
                contentStream.showText("Mã phiếu nhập: " + tMaPN.getText());
                contentStream.endText();
                yPosition -= 20;
                
                contentStream.beginText();
                contentStream.setFont(font, 12);
                contentStream.newLineAtOffset(margin, yPosition);
                contentStream.showText("Mã nhân viên: " + tMaNV.getText());
                contentStream.endText();
                yPosition -= 20;
                
                contentStream.beginText();
                contentStream.setFont(font, 12);
                contentStream.newLineAtOffset(margin, yPosition);
                contentStream.showText("Mã nhà cung cấp: " + tMaNCC.getText());
                contentStream.endText();
                yPosition -= 20;
                
                contentStream.beginText();
                contentStream.setFont(font, 12);
                contentStream.newLineAtOffset(margin, yPosition);
                contentStream.showText("Tổng tiền: " + tTongTien.getText() + " VNĐ");
                contentStream.endText();
                yPosition -= 40;
                
                // Vẽ bảng chi tiết sản phẩm
                String[] headers = {"Tên sản phẩm", "Phiên bản", "Số lượng", "Đơn giá", "Thành tiền"};
                float rowHeight = 25f; // Tăng chiều cao dòng để dễ đọc
                float tableHeight = (dsCTPN.size() + 1) * rowHeight; // +1 cho header
                
                // Nếu không đủ chỗ trên trang hiện tại, tạo trang mới
                if (yPosition - tableHeight < margin) {
                    contentStream.close();
                    page = new PDPage();
                    document.addPage(page);
                    contentStream = new PDPageContentStream(document, page);
                    yPosition = yStart;
                }
                
                // Tính chiều rộng của từng cột
                float[] columnWidths = {tableWidth * 0.35f, tableWidth * 0.25f, tableWidth * 0.1f, tableWidth * 0.15f, tableWidth * 0.15f};
                
                // Vẽ khung của toàn bộ bảng
                contentStream.setLineWidth(0.8f);
                contentStream.addRect(margin, yPosition - tableHeight, tableWidth, tableHeight);
                contentStream.stroke();
                
                // Vẽ header
                float nextX = margin;
                
                // Nền xám cho header
                contentStream.setNonStrokingColor(0.85f, 0.85f, 0.85f);
                contentStream.addRect(margin, yPosition - rowHeight, tableWidth, rowHeight);
                contentStream.fill();
                contentStream.setNonStrokingColor(0, 0, 0); // Trở lại màu đen
                
                // Đường kẻ phân cách các cột
                nextX = margin;
                for (int i = 0; i < columnWidths.length; i++) {
                    nextX += columnWidths[i];
                    if (i < columnWidths.length - 1) {
                        contentStream.moveTo(nextX, yPosition);
                        contentStream.lineTo(nextX, yPosition - tableHeight);
                        contentStream.stroke();
                    }
                }
                
                // Đường kẻ phân cách header và dữ liệu
                contentStream.moveTo(margin, yPosition - rowHeight);
                contentStream.lineTo(margin + tableWidth, yPosition - rowHeight);
                contentStream.stroke();
                
                // Vẽ text của header - căn giữa
                nextX = margin;
                for (int i = 0; i < headers.length; i++) {
                    contentStream.beginText();
                    contentStream.setFont(fontBold, 10);
                    float textWidth = fontBold.getStringWidth(headers[i]) / 1000 * 10;
                    float cellWidth = columnWidths[i];
                    float textX = nextX + (cellWidth - textWidth) / 2;
                    contentStream.newLineAtOffset(textX, yPosition - rowHeight/2 - 5);
                    contentStream.showText(headers[i]);
                    contentStream.endText();
                    nextX += columnWidths[i];
                }
                
                // Vẽ dữ liệu từ bảng
                yPosition -= rowHeight;
                
                // Vẽ các hàng dữ liệu
                for (int i = 0; i < dsCTPN.size(); i++) {
                    CTPNDTO item = dsCTPN.get(i);
                    
                    // Vẽ đường kẻ ngang phân cách các dòng dữ liệu (nếu không phải dòng cuối)
                    if (i < dsCTPN.size() - 1) {
                        contentStream.moveTo(margin, yPosition - rowHeight);
                        contentStream.lineTo(margin + tableWidth, yPosition - rowHeight);
                        contentStream.stroke();
                    }
                    
                    // Vẽ text trong từng ô - với căn lề phù hợp
                    String[] values = {
                        getTenByMaSP(item.getMaSP()),
                        getPhienBanInfo(item.getMaPB()),
                        String.valueOf(item.getSoLuong()),
                        String.valueOf(item.getDonGia()),
                        String.valueOf(item.getThanhTien())
                    };
                    
                    nextX = margin;
                    for (int j = 0; j < values.length; j++) {
                        contentStream.beginText();
                        contentStream.setFont(font, 10);
                        String text = values[j] != null ? values[j] : "";
                        float textWidth = font.getStringWidth(text) / 1000 * 10;
                        float cellWidth = columnWidths[j];
                        float textX;
                        
                        // Căn trái cho tên SP và phiên bản, căn phải cho số liệu
                        if (j <= 1) {
                            textX = nextX + 5; // Căn trái với padding 5px
                        } else {
                            textX = nextX + cellWidth - textWidth - 5; // Căn phải với padding 5px
                        }
                        
                        contentStream.newLineAtOffset(textX, yPosition - rowHeight/2 - 5);
                        contentStream.showText(text);
                        contentStream.endText();
                        
                        nextX += columnWidths[j];
                    }
                    
                    yPosition -= rowHeight;
                    
                    // Nếu không đủ chỗ cho dòng tiếp theo, tạo trang mới
                    if (i < dsCTPN.size() - 1 && yPosition - rowHeight < margin) {
                        contentStream.close();
                        page = new PDPage();
                        document.addPage(page);
                        contentStream = new PDPageContentStream(document, page);
                        
                        yPosition = yStart;
                        
                        // Vẽ lại header trên trang mới
                        // Vẽ header với nền xám
                        contentStream.setNonStrokingColor(0.85f, 0.85f, 0.85f);
                        contentStream.addRect(margin, yPosition - rowHeight, tableWidth, rowHeight);
                        contentStream.fill();
                        contentStream.setNonStrokingColor(0, 0, 0); // Trở lại màu đen
                        
                        // Đường kẻ khung header
                        contentStream.setLineWidth(0.5f);
                        contentStream.addRect(margin, yPosition - rowHeight, tableWidth, rowHeight);
                        contentStream.stroke();
                        
                        // Đường kẻ phân cách các cột
                        nextX = margin;
                        for (int k = 0; k < columnWidths.length; k++) {
                            nextX += columnWidths[k];
                            if (k < columnWidths.length - 1) {
                                contentStream.moveTo(nextX, yPosition);
                                contentStream.lineTo(nextX, yPosition - rowHeight);
                                contentStream.stroke();
                            }
                        }
                        
                // Vẽ text của header
                nextX = margin;
                for (int k = 0; k < headers.length; k++) {
                    contentStream.beginText();
                    contentStream.setFont(fontBold, 10);
                    float textWidth = fontBold.getStringWidth(headers[k]) / 1000 * 10;
                    float cellWidth = columnWidths[k];
                    float textX = nextX + (cellWidth - textWidth) / 2;
                    contentStream.newLineAtOffset(textX, yPosition - rowHeight/2 - 5);
                    contentStream.showText(headers[k]);
                    contentStream.endText();
                    nextX += columnWidths[k];
                }
                
                yPosition -= rowHeight;
            }
        }
        
        // Đóng contentStream
        contentStream.close();
        
        // Lưu document vào file
        document.save(fileToSave);
        document.close();
        
        // Thông báo thành công
        JOptionPane.showMessageDialog(this,
            "Xuất file PDF thành công!", 
            "Thông báo", 
            JOptionPane.INFORMATION_MESSAGE);
        
        // Mở file PDF
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().open(fileToSave);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                "Không thể tự động mở file PDF: " + e.getMessage(),
                "Cảnh báo",
                JOptionPane.WARNING_MESSAGE);
        }
    }
} catch (Exception e) {
    JOptionPane.showMessageDialog(this,
        "Lỗi khi xuất file PDF: " + e.getMessage(),
        "Lỗi",
        JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}    }//GEN-LAST:event_btnXuatPDFActionPerformed


    // Helper method to load data to table
    private void loadTableData() {
        String[] headerNames = {"Tên SP", "Phiên bản", "Số lượng", "Đơn giá", "Thành tiền"};
        Object[][] data = new Object[dsCTPN.size()][5];
        
        for (int i = 0; i < dsCTPN.size(); i++) {
            CTPNDTO item = dsCTPN.get(i);
            String tenSP = getTenByMaSP(item.getMaSP());
            String phienBan = getPhienBanInfo(item.getMaPB());
            data[i][0] = tenSP;
            data[i][1] = phienBan;
            data[i][2] = item.getSoLuong();
            data[i][3] = item.getDonGia();
            data[i][4] = item.getThanhTien();
        }
        
        tbSP.setModel(new javax.swing.table.DefaultTableModel(data, headerNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
    }
    

    // Helper method to clear input fields
  
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnXuatPDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tMaNCC;
    private javax.swing.JTextField tMaNV;
    private javax.swing.JTextField tMaPN;
    private javax.swing.JTextField tTongTien;
    private javax.swing.JTable tbSP;
    // End of variables declaration//GEN-END:variables
}
