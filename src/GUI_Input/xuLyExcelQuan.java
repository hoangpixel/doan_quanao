/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;
import BUS.QuanBUS;
import GUI.QuanGUI;
import DTO.QuanDTO;
import BUS.LoaiSanPhamBUS;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;
/**
 *
 * @author suvie
 */
public class xuLyExcelQuan extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelQuan
     */
    ArrayList<QuanDTO> dskq;
    QuanGUI gui;
    public xuLyExcelQuan(java.awt.Frame parent, boolean modal,ArrayList<QuanDTO> dskq, QuanGUI gui) {
        super(parent, modal);
        this.dskq = dskq;
        this.gui=gui;
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setTitle("Xử lý Excel");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel Quần");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachQuan.xlsx")); // Đổi tên file

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            File existingFile = new File(filePath);
            if (existingFile.exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "File đã tồn tại, bạn có muốn ghi đè không?",
                        "Xác nhận ghi đè", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.NO_OPTION) return;
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Danh sách Quần"); // Đổi tên sheet

                // --- Cell Styles ---
                CellStyle headerStyle = workbook.createCellStyle(); /* ... */
                 headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex()); // Màu khác cho dễ phân biệt
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);
                 org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                CellStyle dataStyle = workbook.createCellStyle(); /* ... */
                dataStyle.setAlignment(HorizontalAlignment.LEFT);
                dataStyle.setBorderTop(BorderStyle.THIN);
                dataStyle.setBorderBottom(BorderStyle.THIN);
                dataStyle.setBorderLeft(BorderStyle.THIN);
                dataStyle.setBorderRight(BorderStyle.THIN);

                CellStyle numberStyle = workbook.createCellStyle(); /* ... */
                 numberStyle.setAlignment(HorizontalAlignment.RIGHT);
                numberStyle.setBorderTop(BorderStyle.THIN);
                numberStyle.setBorderBottom(BorderStyle.THIN);
                numberStyle.setBorderLeft(BorderStyle.THIN);
                numberStyle.setBorderRight(BorderStyle.THIN);
                // --- End Cell Styles ---

                Row headerRow = sheet.createRow(0);
                String[] headers = {"Mã Loại", "Tên Quần"}; // Sửa headers
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                int rowNum = 1;
                QuanBUS tempBus = new QuanBUS(); // Lấy dữ liệu mới nhất
                ArrayList<QuanDTO> currentList = tempBus.docDSQ();

                if (currentList != null && !currentList.isEmpty()) {
                    for (QuanDTO quan : currentList) { // Lặp qua QuanDTO
                        Row row = sheet.createRow(rowNum++);
                        row.createCell(0).setCellValue(quan.getMaLoai()); // getMaLoai
                        row.getCell(0).setCellStyle(numberStyle);

                        row.createCell(1).setCellValue(quan.getTenQuan()); // getTenQuan
                        row.getCell(1).setCellStyle(dataStyle);
                    }
                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JOptionPane.showMessageDialog(this, "Xuất file Excel thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xuất file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    
    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn File Excel Quần");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ArrayList<QuanDTO> excelData = readExcelFile(selectedFile); // Gọi hàm đọc đúng

            if (excelData != null && !excelData.isEmpty()) {
                QuanBUS bus = new QuanBUS(); // Sửa BUS
                bus.docDSQ(); // Đảm bảo cache BUS được load

                int successCount = 0;
                int errorCount = 0;
                int updateCount = 0;
                StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

                for (QuanDTO quanFromExcel : excelData) {
                    try {
                        if (quanFromExcel.getTenQuan() == null || quanFromExcel.getTenQuan().trim().isEmpty()) {
                             throw new IllegalArgumentException("Tên quần không được để trống (Mã loại Excel: " + quanFromExcel.getMaLoai() + ")");
                        }

                         // Logic: Nếu Mã Loại > 0 và tồn tại -> Cập nhật. Nếu không -> Thêm mới.
                        QuanDTO existingQuan = null;
                         if (quanFromExcel.getMaLoai() > 0) {
                           existingQuan = bus.layQuanTheoMa(quanFromExcel.getMaLoai());
                         }

                        if (existingQuan != null) {
                            // Mã loại tồn tại -> Cập nhật
                            existingQuan.setTenQuan(quanFromExcel.getTenQuan()); // Chỉ cập nhật tên
                            bus.sua(existingQuan);
                            updateCount++;
                        } else {
                            // Mã loại không tồn tại hoặc không có trong file -> Thêm mới
                             // Cần đảm bảo mã loại này tồn tại trong bảng loaisp trước khi thêm quần
                             if (new LoaiSanPhamBUS().kiemTraMaLoai(quanFromExcel.getMaLoai())) {
                                QuanDTO newQuan = new QuanDTO(quanFromExcel.getMaLoai(), "", quanFromExcel.getTenQuan());
                                bus.them(newQuan);
                                successCount++;
                             } else {
                                 throw new IllegalArgumentException("Mã loại " + quanFromExcel.getMaLoai() + " không tồn tại trong bảng Loại Sản Phẩm.");
                             }
                        }
                    } catch (IllegalArgumentException | NullPointerException ex) {
                        errorCount++;
                        errorDetails.append("- Dòng ứng với Mã loại Excel ").append(quanFromExcel.getMaLoai()).append(": ").append(ex.getMessage()).append("\n");
                    } catch (Exception e) {
                        errorCount++;
                        errorDetails.append("- Lỗi không xác định với Mã loại Excel ").append(quanFromExcel.getMaLoai()).append(": ").append(e.getMessage()).append("\n");
                        e.printStackTrace();
                    }
                }

                // Cập nhật lại cache trong BUS
                bus.docDSQ();

                // Làm mới danh sách hiển thị trên GUI
                if (gui != null) {
                    gui.loadDataTable(bus.docDSQ()); // Gọi lại hàm load của QuanGUI
                }

                // Hiển thị thông báo tổng kết
                StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
                 message.append("- Tổng số dòng dữ liệu đọc được: ").append(excelData.size()).append("\n");
                message.append("- Số quần thêm mới thành công: ").append(successCount).append("\n");
                message.append("- Số quần cập nhật thành công: ").append(updateCount).append("\n");
                message.append("- Số dòng bị lỗi hoặc bỏ qua: ").append(errorCount);

                JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>");
                lb.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                 if (errorCount > 0) {
                    JTextArea textArea = new JTextArea(errorDetails.toString());
                    textArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(400, 200));
                    JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
                }

            } else if (excelData != null) {
                 JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDocActionPerformed
    private ArrayList<QuanDTO> readExcelFile(File file) {
        ArrayList<QuanDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (rowIterator.hasNext()) {
                rowIterator.next(); // Bỏ qua hàng tiêu đề
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                QuanDTO quan = new QuanDTO(); // Sửa: Tạo QuanDTO
                boolean rowHasData = false;

                try {
                    // Đọc Mã loại (Cột 0) - Số, bắt buộc
                    Cell cellMaLoai = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                     if (cellMaLoai != null && cellMaLoai.getCellType() == CellType.NUMERIC) {
                        quan.setMaLoai((int) cellMaLoai.getNumericCellValue());
                    } else {
                         System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Mã loại không hợp lệ hoặc bị trống.");
                        continue;
                    }

                    // Đọc Tên quần (Cột 1) - Chuỗi, bắt buộc
                    Cell cellTenQuan = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                     if (cellTenQuan != null && cellTenQuan.getCellType() == CellType.STRING && !cellTenQuan.getStringCellValue().trim().isEmpty()) {
                        quan.setTenQuan(cellTenQuan.getStringCellValue().trim()); // Sửa: setTenQuan
                        rowHasData = true;
                    } else {
                         System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Tên quần không hợp lệ hoặc bị trống.");
                        continue;
                    }

                    if (rowHasData) {
                        dataList.add(quan);
                    }

                } catch (Exception e) {
                     System.err.println("Lỗi khi đọc dòng " + (row.getRowNum() + 1) + ": " + e.getMessage());
                    continue;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return dataList;
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
