/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;
import BUS.NhanVienBUS;
import GUI.NhanVienGUI;
import DTO.NhanVienDTO;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;
/**
 *
 * @author suvie
 */
public class xuLyExcelNhanVien extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelNhanVien
     */
    ArrayList<NhanVienDTO> dskq;
    NhanVienGUI gui;
    public xuLyExcelNhanVien(java.awt.Frame parent, boolean modal,ArrayList<NhanVienDTO> dskq, NhanVienGUI gui) {
        super(parent, modal);
        this.dskq = dskq;
        this.gui=gui;
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setTitle("Xử lý Excel");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachNhanVien.xlsx"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Đảm bảo đuôi file là .xlsx
            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

             // Kiểm tra nếu file đã tồn tại
            File existingFile = new File(filePath);
            if (existingFile.exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "File đã tồn tại, bạn có muốn ghi đè không?",
                        "Xác nhận ghi đè",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.NO_OPTION) {
                    return; // Người dùng không muốn ghi đè
                }
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Danh sách nhân viên");

                // --- Định dạng CellStyle (giữ nguyên) ---
                CellStyle headerStyle = workbook.createCellStyle();
                headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);

                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                CellStyle dataStyle = workbook.createCellStyle();
                dataStyle.setAlignment(HorizontalAlignment.LEFT); // Căn trái cho dễ đọc hơn
                dataStyle.setBorderTop(BorderStyle.THIN);
                dataStyle.setBorderBottom(BorderStyle.THIN);
                dataStyle.setBorderLeft(BorderStyle.THIN);
                dataStyle.setBorderRight(BorderStyle.THIN);

                CellStyle numberStyle = workbook.createCellStyle();
                numberStyle.setAlignment(HorizontalAlignment.RIGHT); // Căn phải cho số
                numberStyle.setBorderTop(BorderStyle.THIN);
                numberStyle.setBorderBottom(BorderStyle.THIN);
                numberStyle.setBorderLeft(BorderStyle.THIN);
                numberStyle.setBorderRight(BorderStyle.THIN);
                // --- Kết thúc định dạng ---

                Row headerRow = sheet.createRow(0);
                String[] headers = {"Mã nhân viên", "Họ", "Tên", "Lương", "Số điện thoại", "Địa chỉ", "Email"};
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                int rowNum = 1;
                NhanVienBUS tempBus = new NhanVienBUS(); // Lấy danh sách mới nhất từ BUS
                ArrayList<NhanVienDTO> currentList = tempBus.docDSNV();

                // Sửa: Dùng danh sách mới nhất để ghi
                if (currentList != null && !currentList.isEmpty()) {
                    for (NhanVienDTO nv : currentList) {
                        Row row = sheet.createRow(rowNum++);
                        row.createCell(0).setCellValue(nv.getMa());
                        row.getCell(0).setCellStyle(numberStyle); // Mã NV

                        row.createCell(1).setCellValue(nv.getHo());
                        row.getCell(1).setCellStyle(dataStyle); // Họ

                        row.createCell(2).setCellValue(nv.getTen());
                        row.getCell(2).setCellStyle(dataStyle); // Tên

                        row.createCell(3).setCellValue(nv.getLuong());
                        row.getCell(3).setCellStyle(numberStyle); // Lương

                        row.createCell(4).setCellValue(nv.getSDT());
                        row.getCell(4).setCellStyle(dataStyle); // SDT

                        row.createCell(5).setCellValue(nv.getDiaChi());
                        row.getCell(5).setCellStyle(dataStyle); // Địa chỉ

                        row.createCell(6).setCellValue(nv.getEmail());
                        row.getCell(6).setCellStyle(dataStyle); // Email
                    }
                }


                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JLabel lb = new JLabel("Xuất file Excel thành công!");
                    lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                    JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JLabel lb = new JLabel("Lỗi khi xuất file Excel: " + e.getMessage());
                lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                JOptionPane.showMessageDialog(this, lb, "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    
    
    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn File Excel Nhân Viên"); // Tiêu đề rõ ràng hơn
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx")); // Thêm mô tả bộ lọc
        fileChooser.setAcceptAllFileFilterUsed(false); // Chỉ chấp nhận file xlsx
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ArrayList<NhanVienDTO> excelData = readExcelFile(selectedFile);

            if (excelData != null && !excelData.isEmpty()) {
                NhanVienBUS bus = new NhanVienBUS();
                // Không cần xóa cache vì BUS sẽ tự load lại nếu cần
                // NhanVienBUS.dsnv = null;
                // bus.docDSNV(); // Không cần đọc lại ở đây

                int successCount = 0;
                int errorCount = 0;
                int updateCount = 0;
                StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

                for (NhanVienDTO nvFromExcel : excelData) {
                    try {
                        // Kiểm tra dữ liệu hợp lệ cơ bản trước khi thao tác DB
                        if (nvFromExcel.getHo() == null || nvFromExcel.getHo().isEmpty() ||
                            nvFromExcel.getTen() == null || nvFromExcel.getTen().isEmpty() ||
                            nvFromExcel.getLuong() < 0 ||
                            nvFromExcel.getSDT() == null || nvFromExcel.getSDT().isEmpty() || // Thêm kiểm tra SĐT
                            nvFromExcel.getDiaChi() == null || nvFromExcel.getDiaChi().isEmpty() || // Thêm kiểm tra địa chỉ
                            nvFromExcel.getEmail() == null || nvFromExcel.getEmail().isEmpty()) { // Thêm kiểm tra email
                             throw new IllegalArgumentException("Dữ liệu không đầy đủ hoặc không hợp lệ (Mã NV: " + nvFromExcel.getMa() + ")");
                        }

                        NhanVienDTO existingNV = bus.layNhanVienTheoMa(nvFromExcel.getMa());

                        if (existingNV != null) {
                            // Nếu Mã NV đã tồn tại -> Cập nhật
                            bus.sua(nvFromExcel); // Gọi hàm sửa của BUS
                            updateCount++;
                        } else {
                            // Nếu Mã NV chưa tồn tại -> Thêm mới
                            bus.them(nvFromExcel); // Gọi hàm thêm của BUS
                            successCount++;
                        }
                    } catch (IllegalArgumentException | NullPointerException ex) { // Bắt lỗi cụ thể hơn
                        errorCount++;
                        errorDetails.append("- Dòng ứng với Mã NV ").append(nvFromExcel.getMa()).append(": ").append(ex.getMessage()).append("\n");
                    } catch (Exception e) { // Bắt lỗi chung khác
                         errorCount++;
                         errorDetails.append("- Lỗi không xác định với Mã NV ").append(nvFromExcel.getMa()).append(": ").append(e.getMessage()).append("\n");
                         e.printStackTrace();
                    }
                }

                 // Cập nhật lại cache trong BUS sau khi thêm/sửa
                 bus.docDSNV(); // Giả sử có hàm refresh trong BUS

                // Làm mới danh sách hiển thị trên GUI
                if (gui != null) {
                     gui.loadDataTable(bus.docDSNV()); // Gọi lại hàm load của NhanVienGUI
                     
                }


                // Hiển thị thông báo tổng kết
                StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
                message.append("- Tổng số dòng dữ liệu đọc được: ").append(excelData.size()).append("\n");
                message.append("- Số nhân viên thêm mới thành công: ").append(successCount).append("\n");
                message.append("- Số nhân viên cập nhật thành công: ").append(updateCount).append("\n");
                message.append("- Số dòng bị lỗi hoặc bỏ qua: ").append(errorCount);

                JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>"); // Dùng HTML để xuống dòng
                lb.setFont(new Font("Segoe UI", Font.PLAIN, 14)); // Font nhỏ hơn

                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                // Hiển thị chi tiết lỗi nếu có
                 if (errorCount > 0) {
                     JTextArea textArea = new JTextArea(errorDetails.toString());
                     textArea.setEditable(false);
                     JScrollPane scrollPane = new JScrollPane(textArea);
                     scrollPane.setPreferredSize(new Dimension(400, 200));
                     JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
                 }


            } else if (excelData != null){ // excelData không null nhưng rỗng
                 JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
            // Trường hợp excelData là null (lỗi đọc file) đã được xử lý trong readExcelFile
        }
    }//GEN-LAST:event_btnDocActionPerformed
    private ArrayList<NhanVienDTO> readExcelFile(File file) {
        ArrayList<NhanVienDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0); // Đọc từ sheet đầu tiên
            Iterator<Row> rowIterator = sheet.iterator();

            // Bỏ qua hàng tiêu đề
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                NhanVienDTO nv = new NhanVienDTO();
                boolean rowHasData = false; // Cờ kiểm tra dòng có dữ liệu không

                try {
                    // Đọc Mã nhân viên (Cột 0) - Bắt buộc là số
                    Cell cellMaNV = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellMaNV != null && cellMaNV.getCellType() == CellType.NUMERIC) {
                        nv.setMa((int) cellMaNV.getNumericCellValue());
                        rowHasData = true; // Có dữ liệu ở cột bắt buộc
                    } else {
                         // Nếu mã NV bị thiếu hoặc sai kiểu, bỏ qua dòng này hoặc báo lỗi
                         System.err.println("Bỏ qua dòng " + (row.getRowNum() + 1) + ": Mã nhân viên không hợp lệ.");
                         continue; // Bỏ qua dòng này
                    }

                    // Đọc Họ (Cột 1) - Chuỗi
                    Cell cellHo = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellHo != null && cellHo.getCellType() == CellType.STRING) {
                        nv.setHo(cellHo.getStringCellValue().trim());
                    } else {
                         nv.setHo(""); // Hoặc xử lý khác nếu cần
                         System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": Họ không phải dạng chuỗi.");
                    }


                    // Đọc Tên (Cột 2) - Chuỗi
                    Cell cellTen = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                     if (cellTen != null && cellTen.getCellType() == CellType.STRING) {
                        nv.setTen(cellTen.getStringCellValue().trim());
                    } else {
                         nv.setTen("");
                         System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": Tên không phải dạng chuỗi.");
                    }


                    // Đọc Lương (Cột 3) - Số
                    Cell cellLuong = row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellLuong != null && cellLuong.getCellType() == CellType.NUMERIC) {
                        nv.setLuong((int) cellLuong.getNumericCellValue());
                    } else {
                        nv.setLuong(0); // Giá trị mặc định nếu lỗi
                         System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": Lương không phải dạng số.");
                    }

                    // Đọc Số điện thoại (Cột 4) - Chuỗi (để giữ số 0 ở đầu)
                    Cell cellSDT = row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellSDT != null) {
                        if (cellSDT.getCellType() == CellType.STRING) {
                            nv.setSDT(cellSDT.getStringCellValue().trim());
                        } else if (cellSDT.getCellType() == CellType.NUMERIC) {
                            // Định dạng số thành chuỗi nếu cần
                            nv.setSDT(String.format("%.0f", cellSDT.getNumericCellValue()));
                        } else {
                            nv.setSDT("");
                            System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": SĐT không hợp lệ.");
                        }
                    } else {
                          nv.setSDT("");
                    }


                    // Đọc Địa chỉ (Cột 5) - Chuỗi
                    Cell cellDiaChi = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                    if (cellDiaChi != null && cellDiaChi.getCellType() == CellType.STRING) {
                        nv.setDiaChi(cellDiaChi.getStringCellValue().trim());
                    } else {
                         nv.setDiaChi("");
                         System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": Địa chỉ không phải dạng chuỗi.");
                    }

                    // Đọc Email (Cột 6) - Chuỗi
                    Cell cellEmail = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                     if (cellEmail != null && cellEmail.getCellType() == CellType.STRING) {
                        nv.setEmail(cellEmail.getStringCellValue().trim());
                    } else {
                         nv.setEmail("");
                          System.err.println("Cảnh báo dòng " + (row.getRowNum() + 1) + ": Email không phải dạng chuỗi.");
                    }


                    // Chỉ thêm vào danh sách nếu dòng có dữ liệu hợp lệ (ít nhất là Mã NV)
                    if (rowHasData) {
                         dataList.add(nv);
                    }

                } catch (Exception e) {
                    System.err.println("Lỗi khi đọc dòng " + (row.getRowNum() + 1) + ": " + e.getMessage());
                    // Có thể ghi log lỗi chi tiết hơn ở đây
                    continue; // Bỏ qua dòng lỗi và tiếp tục dòng tiếp theo
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null; // Trả về null nếu có lỗi IO
        }
        return dataList;
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
