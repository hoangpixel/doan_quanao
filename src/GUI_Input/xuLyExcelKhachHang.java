/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import GUI.KhachHangGUI;
import BUS.KhachHangBUS;
import DTO.KhachHangDTO;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author mhoang
 */
public class xuLyExcelKhachHang extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcel
     */
    ArrayList<KhachHangDTO> dskq;
    KhachHangGUI gui;
    public xuLyExcelKhachHang(java.awt.Frame parent, boolean modal,ArrayList<KhachHangDTO> dskq,KhachHangGUI gui) {
        super(parent, modal);
        this.dskq = dskq;
        this.gui=gui;
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setTitle("Xử lý Excel");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachHoaDon.xlsx"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            if (!filePath.endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Danh sách HoaDon");

                CellStyle headerStyle = workbook.createCellStyle();
                headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);

                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                CellStyle dataStyle = workbook.createCellStyle();
                dataStyle.setAlignment(HorizontalAlignment.CENTER);
                dataStyle.setBorderTop(BorderStyle.THIN);
                dataStyle.setBorderBottom(BorderStyle.THIN);
                dataStyle.setBorderLeft(BorderStyle.THIN);
                dataStyle.setBorderRight(BorderStyle.THIN);

                Row headerRow = sheet.createRow(0);
                String[] headers = {"Mã KH", "Họ", "Tên", "SĐT","Địa chỉ","Email"};
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                int rowNum = 1;
                for (KhachHangDTO ct : dskq) {
                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0).setCellValue(ct.getMaKH());
                    row.createCell(1).setCellValue(ct.getHoKH());
                    row.createCell(2).setCellValue(ct.getTenKH());
                    row.createCell(3).setCellValue(ct.getSDT());
                    row.createCell(4).setCellValue(ct.getDiaChi());
                    row.createCell(5).setCellValue(ct.geteMail());
                    for (int i = 0; i < headers.length; i++) {
                        row.getCell(i).setCellStyle(dataStyle);
                    }
                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JLabel lb = new JLabel("Xuất file Excel thành công!");
                    lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                    JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JLabel lb = new JLabel("Lỗi khi xuất file Excel: " + e.getMessage());
                lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                JOptionPane.showMessageDialog(this, lb, "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    
    
    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocActionPerformed
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Chọn File Excel");
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files", "xlsx"));
            int result = fileChooser.showOpenDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                ArrayList<KhachHangDTO> excelData = readExcelFile(selectedFile);

                // Kiểm tra dữ liệu đọc được từ file
                if (excelData != null && !excelData.isEmpty()) {
                    // Làm mới dữ liệu trong ChuongTrinhKhuyenMaiSanPhamBUS.ds
                    KhachHangBUS bus = new KhachHangBUS();
                    KhachHangBUS.ds = null; // Xóa danh sách cũ
                    bus.docDSKH(); // Đọc lại từ cơ sở dữ liệu

                    // Kiểm tra và thêm dữ liệu vào cơ sở dữ liệu
                    int insertCount = 0;
                    int updateCount = 0;
                    int skipCount = 0;

                    for (KhachHangDTO ct : excelData) {
                        // Kiểm tra mã CTKMSP đã tồn tại chưa
                        if (bus.ktraMaKH(ct.getMaKH())) {
                            bus.sua(ct);
                        updateCount++;
                        continue; // Bỏ qua bản ghi trùng lặp
                    }

                    // Kiểm tra dữ liệu hợp lệ
                    }
                    // Làm mới dskq và cập nhật JTable
                    dskq.clear();
                    bus.docDSKH();
                    if(KhachHangBUS.ds !=null)
                    {
                        dskq.addAll(KhachHangBUS.ds);
                    }
                    gui.updateTB(dskq);
                    // Đồng bộ ChuongTrinhKhuyenMaiSanPhamBUS.ds với dskq
                    KhachHangBUS.ds.clear();
                    KhachHangBUS.ds.addAll(dskq);

                    // Hiển thị thông báo
                    String message = "Đọc file Excel thành công!\n" +
                            "Tổng số dòng đọc: " + excelData.size() + "\n" +
                            "Thêm mới: " + insertCount + "\n" +
                            "Cập nhật: " + updateCount + "\n" +
                            "Bỏ qua (không hợp lệ): " + skipCount;

                    JLabel lb = new JLabel(message);
                    lb.setFont(new Font("Segoe UI", Font.BOLD, 16));
                    JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
//                            JLabel lb = new JLabel("Đọc dữ liệu thành công!");
//            lb.setFont(new Font("Segoe UI", Font.BOLD, 16));
//            JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    // Cập nhật lại giao diện
                    gui.docDB();
                } else {
                    JOptionPane.showMessageDialog(this, "Không có dữ liệu trong file Excel", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        
    }//GEN-LAST:event_btnDocActionPerformed
    private ArrayList<KhachHangDTO> readExcelFile(File file) {
        ArrayList<KhachHangDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0); // Đọc từ sheet đầu tiên
            
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // Bỏ qua hàng tiêu đề

                // Kiểm tra dòng có dữ liệu không
                if (row.getCell(0) == null) {
                    continue; // Bỏ qua dòng nếu thiếu dữ liệu mã KH
                }

                try {
                    // Đọc Mã KH
                    Cell maKHCell = row.getCell(0);
                    int maKH;
                    if (maKHCell.getCellType() == CellType.NUMERIC) {
                        maKH = (int) maKHCell.getNumericCellValue();
                    } else {
                        throw new IllegalStateException("Mã KH phải là số nguyên tại dòng " + (row.getRowNum() + 1));
                    }
                    
                    // Đọc Họ KH
                    Cell hoKHCell = row.getCell(1);
                    String hoKH = "";
                    if (hoKHCell != null) {
                        if (hoKHCell.getCellType() == CellType.STRING) {
                            hoKH = hoKHCell.getStringCellValue();
                        } else if (hoKHCell.getCellType() == CellType.NUMERIC) {
                            hoKH = String.valueOf((int) hoKHCell.getNumericCellValue());
                        }
                    }
                    
                    // Đọc Tên KH
                    Cell tenKHCell = row.getCell(2);
                    String tenKH = "";
                    if (tenKHCell != null) {
                        if (tenKHCell.getCellType() == CellType.STRING) {
                            tenKH = tenKHCell.getStringCellValue();
                        } else if (tenKHCell.getCellType() == CellType.NUMERIC) {
                            tenKH = String.valueOf((int) tenKHCell.getNumericCellValue());
                        }
                    }
                    
                    // Đọc SDT
                    Cell sdtCell = row.getCell(3);
                    String SDT = "";
                    if (sdtCell != null) {
                        if (sdtCell.getCellType() == CellType.STRING) {
                            SDT = sdtCell.getStringCellValue();
                        } else if (sdtCell.getCellType() == CellType.NUMERIC) {
                            SDT = String.valueOf((long) sdtCell.getNumericCellValue());
                        }
                    }
                    
                    // Đọc Địa chỉ
                    Cell diaChiCell = row.getCell(4);
                    String diaChi = "";
                    if (diaChiCell != null) {
                        if (diaChiCell.getCellType() == CellType.STRING) {
                            diaChi = diaChiCell.getStringCellValue();
                        } else if (diaChiCell.getCellType() == CellType.NUMERIC) {
                            diaChi = String.valueOf(diaChiCell.getNumericCellValue());
                        }
                    }
                    
                    // Đọc Email
                    Cell emailCell = row.getCell(5);
                    String email = "";
                    if (emailCell != null) {
                        if (emailCell.getCellType() == CellType.STRING) {
                            email = emailCell.getStringCellValue();
                        } else if (emailCell.getCellType() == CellType.NUMERIC) {
                            email = String.valueOf(emailCell.getNumericCellValue());
                        }
                    }

                    // Tạo đối tượng KhachHangDTO với dữ liệu đã đọc
                    KhachHangDTO khachHang = new KhachHangDTO(maKH, hoKH, tenKH, SDT, diaChi, email);
                    dataList.add(khachHang);

                } catch (IllegalStateException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    continue; // Bỏ qua dòng lỗi
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file Excel: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        return dataList;
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
