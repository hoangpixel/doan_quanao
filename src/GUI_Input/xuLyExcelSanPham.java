/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI_Input;

import BUS.SanPhamBUS;
import DTO.SanPhamDTO;
import GUI.SanPhamGUI;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.awt.Font;
import java.util.Iterator;

/**
 *
 * @author Vinh
 */
public class xuLyExcelSanPham extends javax.swing.JDialog {

    /**
     * Creates new form xuLyExcelSanPham
     */
    ArrayList<SanPhamDTO> dskq;
    SanPhamGUI gui;

    public xuLyExcelSanPham(java.awt.Frame parent, boolean modal, ArrayList<SanPhamDTO> dskq, SanPhamGUI gui) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGhi = new javax.swing.JButton();
        btnDoc = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đọc, ghi vào Excel");
        jPanel1.add(jLabel1);

        btnGhi.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGhi.setText("Ghi");
        btnGhi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGhi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiActionPerformed(evt);
            }
        });
        jPanel2.add(btnGhi);

        btnDoc.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnDoc.setText("Đọc");
        btnDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocActionPerformed(evt);
            }
        });
        jPanel2.add(btnDoc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new File("DanhSachSanPham.xlsx"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            File existingFile = new File(filePath);
            if (existingFile.exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "File đã tồn tại, bạn có muốn ghi đè không?",
                        "Xác nhận ghi đè",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.NO_OPTION) {
                    return;
                }
            }

            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("Danh sách sản phẩm");

                // Style cho header
                CellStyle headerStyle = workbook.createCellStyle();
                headerStyle.setAlignment(HorizontalAlignment.CENTER);
                headerStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerStyle.setBorderTop(BorderStyle.THIN);
                headerStyle.setBorderBottom(BorderStyle.THIN);
                headerStyle.setBorderLeft(BorderStyle.THIN);
                headerStyle.setBorderRight(BorderStyle.THIN);

                org.apache.poi.ss.usermodel.Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 12);
                headerStyle.setFont(headerFont);

                // Style cho dữ liệu
                CellStyle dataStyle = workbook.createCellStyle();
                dataStyle.setBorderTop(BorderStyle.THIN);
                dataStyle.setBorderBottom(BorderStyle.THIN);
                dataStyle.setBorderLeft(BorderStyle.THIN);
                dataStyle.setBorderRight(BorderStyle.THIN);
                dataStyle.setAlignment(HorizontalAlignment.LEFT);

                CellStyle numberStyle = workbook.createCellStyle();
                numberStyle.cloneStyleFrom(dataStyle);
                numberStyle.setAlignment(HorizontalAlignment.RIGHT);

                // Header
                String[] headers = {"Mã SP", "Tên SP", "Đơn giá", "Đơn vị tính", "Chất liệu", "Mô tả", "Mã loại"};
                Row headerRow = sheet.createRow(0);
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                }

                // Dữ liệu
                SanPhamBUS spBUS = new SanPhamBUS();
                ArrayList<SanPhamDTO> dsSP = spBUS.layTatCaSanPham();
                int rowNum = 1;

                for (SanPhamDTO sp : dsSP) {
                    Row row = sheet.createRow(rowNum++);
                    int col = 0;

                    Cell c0 = row.createCell(col++);
                    c0.setCellValue(sp.getMaSP());
                    c0.setCellStyle(numberStyle);

                    Cell c1 = row.createCell(col++);
                    c1.setCellValue(sp.getTenSP());
                    c1.setCellStyle(dataStyle);

                    Cell c2 = row.createCell(col++);
                    c2.setCellValue(sp.getDonGia());
                    c2.setCellStyle(numberStyle);

                    Cell c3 = row.createCell(col++);
                    c3.setCellValue(sp.getDonViTinh());
                    c3.setCellStyle(dataStyle);

                    Cell c4 = row.createCell(col++);
                    c4.setCellValue(sp.getChatLieu());
                    c4.setCellStyle(dataStyle);

                    Cell c5 = row.createCell(col++);
                    c5.setCellValue(sp.getMoTa());
                    c5.setCellStyle(dataStyle);

                    Cell c6 = row.createCell(col++);
                    c6.setCellValue(sp.getMaLoai());
                    c6.setCellStyle(numberStyle);

                }

                for (int i = 0; i < headers.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                    workbook.write(outputStream);
                    JLabel lb = new JLabel("Xuất file Excel thành công!");
                    lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                    JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JLabel lb = new JLabel("Lỗi khi xuất file Excel: " + e.getMessage());
                lb.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
                JOptionPane.showMessageDialog(this, lb, "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnGhiActionPerformed

    private void btnDocActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn File Excel Sản Phẩm");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel files (*.xlsx)", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ArrayList<SanPhamDTO> excelData = readExcelSanPham(selectedFile);

            if (excelData != null && !excelData.isEmpty()) {
                SanPhamBUS bus = new SanPhamBUS();
                int successCount = 0, errorCount = 0, updateCount = 0;
                StringBuilder errorDetails = new StringBuilder("Các lỗi xảy ra:\n");

                for (SanPhamDTO sp : excelData) {
                    try {

                        SanPhamDTO existing = bus.laySanPhamTheoMaSP(sp.getMaSP());
                        if (existing != null) {
                            bus.suaSanPham(sp);
                            updateCount++;
                        } else {
                            bus.themSanPham(sp);
                            successCount++;
                        }
                    } catch (Exception e) {
                        errorCount++;
                        errorDetails.append("- Mã SP ").append(sp.getMaSP()).append(": ").append(e.getMessage()).append("\n");
                        e.printStackTrace();
                    }
                }

                bus.refreshDanhSach(); // Làm mới danh sách sản phẩm sau khi cập nhật

                if (gui != null) {
                    gui.loadDataTable(bus.layTatCaSanPham()); // Gọi lại để hiển thị dữ liệu mới
                }

                // Hiển thị kết quả
                StringBuilder message = new StringBuilder("Đọc file Excel hoàn tất!\n");
                message.append("- Tổng số dòng đọc: ").append(excelData.size()).append("\n");
                message.append("- Thêm mới: ").append(successCount).append("\n");
                message.append("- Cập nhật: ").append(updateCount).append("\n");
                message.append("- Lỗi: ").append(errorCount);

                JLabel lb = new JLabel("<html>" + message.toString().replace("\n", "<br>") + "</html>");
                lb.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                JOptionPane.showMessageDialog(this, lb, "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                if (errorCount > 0) {
                    JTextArea textArea = new JTextArea(errorDetails.toString());
                    textArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(400, 200));
                    JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết lỗi", JOptionPane.WARNING_MESSAGE);
                }

            } else if (excelData != null) {
                JOptionPane.showMessageDialog(this, "File Excel không có dữ liệu hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setLocationRelativeTo(getParent());

    }//GEN-LAST:event_formWindowOpened

    private ArrayList<SanPhamDTO> readExcelSanPham(File file) {
        ArrayList<SanPhamDTO> dataList = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(file); Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = sheet.iterator();
            if (iterator.hasNext()) {
                iterator.next(); // Bỏ qua dòng tiêu đề
            }
            while (iterator.hasNext()) {
                Row row = iterator.next();
                try {
                    SanPhamDTO sp = new SanPhamDTO();
                    sp.setMaSP((int) row.getCell(0).getNumericCellValue());
                    sp.setTenSP(row.getCell(1).getStringCellValue().trim());
                    sp.setDonGia((int) row.getCell(2).getNumericCellValue());
                    sp.setDonViTinh(row.getCell(3).getStringCellValue().trim());
                    sp.setChatLieu(row.getCell(4).getStringCellValue().trim());
                    sp.setMoTa(row.getCell(5).getStringCellValue().trim());
                    sp.setMaLoai((int) row.getCell(6).getNumericCellValue());
                    // Không đọc is_deleted
                    dataList.add(sp);
                } catch (Exception e) {
                    System.err.println("Lỗi dòng " + row.getRowNum() + ": " + e.getMessage());
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return dataList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoc;
    private javax.swing.JButton btnGhi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
